1. 트리를 만든다
2. parent 배열(: 각 node의 2^k번째 ancestor)을 채운다
3. LCA를 찾으려는 u, v의 depth를 맞춰준다(parent 배열 이용)
4. depth가 같으므로 u, v에서 같은 parent가 등장할 때까지 거슬러 올라간다
- parent 배열 이용: 2^MAX번째 ancestor부터 검사
-> -1이라면 트리의 root를 넘어간 것: --k
-> 같다면 너무 많이 올라간 것
-> 2^(k+1)번째 ancestor가 같고 2^k번째 ancestor가 다르다면 그 사이에 LCA가 있다
--> 2^k번째 ancestor로 u, v를 재설정하고 k-1~1에 대해 위 과정을 반복
--> 2^(k+1)번째 ancestor는 같으므로 LCA를 찾을 수 있음이 보장됨

위 과정을 통해 u, v로부터 최대한 거슬러 올라가면서 같지 않은 두 node를 찾을 수 있고,
마지막으로 둘 중 한 node에서 한 번 더 거슬러 올라가면 그 node가 바로 LCA이다.